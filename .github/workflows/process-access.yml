name: Process Repository Access Request

on:
  issues:
    types: [opened]

jobs:
  grant-access:
    runs-on: ubuntu-latest
    # Only run if issue title contains [ACCESS REQUEST]
    if: contains(github.event.issue.title, '[ACCESS REQUEST]')
    
    steps:
      - name: Extract User Data
        id: extract
        run: |
          echo "Extracting data from issue body..."
          BODY="${{ github.event.issue.body }}"
          
          # Extract GitHub username (remove ** markdown and spaces)
          GITHUB_USER=$(echo "$BODY" | grep "GitHub Username:" | sed 's/.*GitHub Username: *//' | sed 's/\*\*.*//' | tr -d ' ' | tr -d '\r')
          echo "github_user=$GITHUB_USER" >> $GITHUB_OUTPUT
          
          # Extract email
          EMAIL=$(echo "$BODY" | grep "Email:" | sed 's/.*Email: *//' | sed 's/\*\*.*//' | tr -d '\r')
          echo "email=$EMAIL" >> $GITHUB_OUTPUT
          
          # Extract name  
          NAME=$(echo "$BODY" | grep "Name:" | sed 's/.*Name: *//' | sed 's/\*\*.*//' | tr -d '\r')
          echo "name=$NAME" >> $GITHUB_OUTPUT
          
          echo "Extracted - Name: $NAME, Email: $EMAIL, GitHub: $GITHUB_USER"
      
      - name: Add Repository Collaborator
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const githubUser = '${{ steps.extract.outputs.github_user }}';
            const email = '${{ steps.extract.outputs.email }}';
            const name = '${{ steps.extract.outputs.name }}';
            
            console.log(`Attempting to add ${githubUser} as collaborator to PCA_Dashboard...`);
            
            try {
              // Add user as collaborator with read access
              await github.rest.repos.addCollaborator({
                owner: 'Trammell-Whitfield',
                repo: 'PCA_Dashboard',
                username: githubUser,
                permission: 'pull'  // read-only access
              });
              
              console.log('Successfully added collaborator!');
              
              // Comment on the issue with success
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚úÖ **Access Granted!**\n\n@${githubUser} has been successfully added as a collaborator to the PCA_Dashboard repository.\n\n**Next Steps:**\n1. Check your email for the GitHub invitation\n2. Accept the repository invitation\n3. Clone the repository:\n\`\`\`bash\ngit clone https://github.com/Trammell-Whitfield/PCA_Dashboard.git\n\`\`\`\n\n**Access Level:** Read-only (pull)\n**Granted at:** ${new Date().toISOString()}\n\nWelcome to the PCA Dashboard pre-release program! üéâ`
              });
              
              // Add success label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['access-granted']
              });
              
            } catch (error) {
              console.error('Error adding collaborator:', error.message);
              
              // Comment with error
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ùå **Error Granting Access**\n\nFailed to add @${githubUser} as a collaborator.\n\n**Possible reasons:**\n- The username may not exist on GitHub\n- The username may be misspelled\n- The user may already have access\n- There may be a permissions issue\n\n**Error details:** ${error.message}\n\n**Manual action required:** Please manually add this user or contact them for the correct username.`
              });
              
              // Add error label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['error', 'needs-manual-review']
              });
            }
      
      - name: Close Issue
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });
